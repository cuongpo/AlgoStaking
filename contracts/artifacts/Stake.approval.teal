#pragma version 9

// This TEAL was generated by TEALScript v0.59.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// bootstrap()uint64
//
// // mint Token
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bootstrap()uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 1 0

	// contracts/stake.algo.ts:27
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/stake.algo.ts:28
	// stakingToken = sendAssetCreation({
	//       configAssetTotal: 10000,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/stake.algo.ts:29
	// configAssetTotal: 10000
	int 10000
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -1 // stakingToken: asset

	// contracts/stake.algo.ts:32
	// this.stakingToken.value = stakingToken
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	frame_dig -1 // stakingToken: asset
	app_global_put

	// contracts/stake.algo.ts:33
	// return stakingToken;
	frame_dig -1 // stakingToken: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// faucet(asset)void
abi_route_faucet:
	// stakingToken: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute faucet(asset)void
	callsub faucet
	int 1
	return

faucet:
	proto 1 0

	// contracts/stake.algo.ts:37
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:38
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:39
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:40
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getStakingToken()uint64
abi_route_getStakingToken:
	// execute getStakingToken()uint64
	callsub getStakingToken
	int 1
	return

getStakingToken:
	proto 0 0

	// contracts/stake.algo.ts:45
	// return this.stakingToken.value;
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// createApplication(uint64)void
abi_route_createApplication:
	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/stake.algo.ts:49
	// this.duration.value = duration
	byte 0x6475726174696f6e // "duration"
	frame_dig -1 // duration: uint64
	app_global_put
	retsub

// lastTimeRewardApplicable()uint64
abi_route_lastTimeRewardApplicable:
	// execute lastTimeRewardApplicable()uint64
	callsub lastTimeRewardApplicable
	int 1
	return

lastTimeRewardApplicable:
	proto 0 0

	// if0_condition
	// contracts/stake.algo.ts:53
	// globals.latestTimestamp <= this.finishAt.value
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	<=
	bz if0_end

	// if0_consequent
	// contracts/stake.algo.ts:54
	// return globals.latestTimestamp;
	global LatestTimestamp
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

if0_end:
	// contracts/stake.algo.ts:56
	// return this.finishAt.value;
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// rewardPerToken()uint64
abi_route_rewardPerToken:
	// execute rewardPerToken()uint64
	callsub rewardPerToken
	int 1
	return

rewardPerToken:
	proto 0 0

	// if1_condition
	// contracts/stake.algo.ts:60
	// this.totalSupply.value === 0
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	int 0
	==
	bz if1_end

	// if1_consequent
	// contracts/stake.algo.ts:61
	// return this.rewardPerTokenStored.value;
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

if1_end:
	// contracts/stake.algo.ts:64
	// return (
	//       this.rewardPerTokenStored.value +
	//       (this.rewardRate.value * (this.lastTimeRewardApplicable() - this.updatedAt.value) * 1000000000000000000) /
	//         this.totalSupply.value
	//     );
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	byte 0x72657761726452617465 // "rewardRate"
	app_global_get
	callsub lastTimeRewardApplicable
	byte 0x757064617465644174 // "updatedAt"
	app_global_get
	-
	*
	int 1000000000000000000
	*
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	/
	+
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// earned(address)uint64
abi_route_earned:
	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute earned(address)uint64
	callsub earned
	int 1
	return

earned:
	proto 1 0

	// contracts/stake.algo.ts:72
	// return (
	//       (this.balanceOf(account).value * (this.rewardPerToken() - this.userRewardPerTokenPaid(account).value)) /
	//         1000000000000000000 +
	//       this.rewards(account).value
	//     );
	byte 0x62 // "b"
	frame_dig -1 // account: address
	concat
	box_get
	assert
	btoi
	callsub rewardPerToken
	byte 0x75 // "u"
	frame_dig -1 // account: address
	concat
	box_get
	assert
	btoi
	-
	*
	int 1000000000000000000
	/
	byte 0x72 // "r"
	frame_dig -1 // account: address
	concat
	box_get
	assert
	btoi
	+
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

updateReward:
	proto 1 0

	// contracts/stake.algo.ts:80
	// this.rewardPerTokenStored.value = this.rewardPerToken()
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	callsub rewardPerToken
	app_global_put

	// contracts/stake.algo.ts:81
	// this.updatedAt.value = this.lastTimeRewardApplicable()
	byte 0x757064617465644174 // "updatedAt"
	callsub lastTimeRewardApplicable
	app_global_put

	// contracts/stake.algo.ts:82
	// this.rewards(account).value = this.earned(account)
	byte 0x72 // "r"
	frame_dig -1 // account: address
	concat
	frame_dig -1 // account: address
	callsub earned
	itob
	box_put

	// contracts/stake.algo.ts:83
	// this.userRewardPerTokenPaid(account).value = this.rewardPerTokenStored.value
	byte 0x75 // "u"
	frame_dig -1 // account: address
	concat
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	itob
	box_put
	retsub

// appOptedinAsset(asset)void
abi_route_appOptedinAsset:
	// stakingToken: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute appOptedinAsset(asset)void
	callsub appOptedinAsset
	int 1
	return

appOptedinAsset:
	proto 1 0

	// contracts/stake.algo.ts:87
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:88
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:89
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:90
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// stake(address,axfer)void
abi_route_stake:
	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute stake(address,axfer)void
	callsub stake
	int 1
	return

stake:
	proto 2 0

	// contracts/stake.algo.ts:96
	// this.balanceOf(account).value = this.balanceOf(account).value + axfer.assetAmount
	byte 0x62 // "b"
	frame_dig -2 // account: address
	concat
	byte 0x62 // "b"
	frame_dig -2 // account: address
	concat
	box_get
	assert
	btoi
	frame_dig -1 // axfer: axfer
	gtxns AssetAmount
	+
	itob
	box_put

	// contracts/stake.algo.ts:97
	// this.totalSupply.value = this.totalSupply.value + axfer.assetAmount
	byte 0x746f74616c537570706c79 // "totalSupply"
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	frame_dig -1 // axfer: axfer
	gtxns AssetAmount
	+
	app_global_put

	// contracts/stake.algo.ts:98
	// this.updateReward(this.txn.sender)
	txn Sender
	callsub updateReward
	retsub

// withdraw(uint64)void
abi_route_withdraw:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64)void
	callsub withdraw
	int 1
	return

withdraw:
	proto 1 0

	// contracts/stake.algo.ts:102
	// assert(amount > 0)
	frame_dig -1 // amount: uint64
	int 0
	>
	assert

	// contracts/stake.algo.ts:103
	// assert(this.balanceOf(this.txn.sender).value > amount)
	byte 0x62 // "b"
	txn Sender
	concat
	box_get
	assert
	btoi
	frame_dig -1 // amount: uint64
	>
	assert

	// contracts/stake.algo.ts:104
	// this.balanceOf(this.txn.sender).value = this.balanceOf(this.txn.sender).value - amount
	byte 0x62 // "b"
	txn Sender
	concat
	byte 0x62 // "b"
	txn Sender
	concat
	box_get
	assert
	btoi
	frame_dig -1 // amount: uint64
	-
	itob
	box_put

	// contracts/stake.algo.ts:105
	// this.totalSupply.value = this.totalSupply.value - amount
	byte 0x746f74616c537570706c79 // "totalSupply"
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	app_global_put

	// contracts/stake.algo.ts:106
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:107
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:108
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:109
	// assetAmount: amount
	frame_dig -1 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stake.algo.ts:111
	// this.updateReward(this.txn.sender)
	txn Sender
	callsub updateReward
	retsub

// getReward()void
abi_route_getReward:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute getReward()void
	callsub getReward
	int 1
	return

getReward:
	proto 1 0

	// contracts/stake.algo.ts:115
	// reward = this.rewards(this.txn.sender).value
	byte 0x72 // "r"
	txn Sender
	concat
	box_get
	assert
	btoi
	frame_bury -1 // reward: uint64

	// if2_condition
	// contracts/stake.algo.ts:116
	// reward > 0
	frame_dig -1 // reward: uint64
	int 0
	>
	bz if2_end

	// if2_consequent
	// contracts/stake.algo.ts:117
	// this.rewards(this.txn.sender).value = 0
	byte 0x72 // "r"
	txn Sender
	concat
	byte 0x0000000000000000
	box_put

	// contracts/stake.algo.ts:118
	// sendAssetTransfer({
	//         xferAsset: this.stakingToken.value,
	//         assetReceiver: this.txn.sender,
	//         assetAmount: reward,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:119
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:120
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:121
	// assetAmount: reward
	frame_dig -1 // reward: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if2_end:
	retsub

// setRewardsDuration(uint64)void
abi_route_setRewardsDuration:
	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute setRewardsDuration(uint64)void
	callsub setRewardsDuration
	int 1
	return

setRewardsDuration:
	proto 1 0

	// contracts/stake.algo.ts:127
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/stake.algo.ts:128
	// assert(globals.latestTimestamp > this.finishAt.value)
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	>
	assert

	// contracts/stake.algo.ts:129
	// this.duration.value = duration
	byte 0x6475726174696f6e // "duration"
	frame_dig -1 // duration: uint64
	app_global_put
	retsub

// notifyRewardAmount(uint64)void
abi_route_notifyRewardAmount:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute notifyRewardAmount(uint64)void
	callsub notifyRewardAmount
	int 1
	return

notifyRewardAmount:
	proto 1 0

	// contracts/stake.algo.ts:133
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// if3_condition
	// contracts/stake.algo.ts:134
	// globals.latestTimestamp >= this.finishAt.value
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	>=
	bz if3_else

	// if3_consequent
	// contracts/stake.algo.ts:135
	// this.rewardRate.value = amount / this.duration.value
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -1 // amount: uint64
	byte 0x6475726174696f6e // "duration"
	app_global_get
	/
	app_global_put
	b if3_end

if3_else:
	// contracts/stake.algo.ts:137
	// this.rewardRate.value =
	//         (amount + this.rewardRate.value * (this.finishAt.value - globals.latestTimestamp)) / this.duration.value
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -1 // amount: uint64
	byte 0x72657761726452617465 // "rewardRate"
	app_global_get
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	global LatestTimestamp
	-
	*
	+
	byte 0x6475726174696f6e // "duration"
	app_global_get
	/
	app_global_put

if3_end:
	// contracts/stake.algo.ts:140
	// assert(this.rewardRate.value > 0)
	byte 0x72657761726452617465 // "rewardRate"
	app_global_get
	int 0
	>
	assert

	// contracts/stake.algo.ts:142
	// this.updatedAt.value = globals.latestTimestamp
	byte 0x757064617465644174 // "updatedAt"
	global LatestTimestamp
	app_global_put

	// contracts/stake.algo.ts:143
	// this.finishAt.value = globals.latestTimestamp + this.duration.value
	byte 0x66696e6973684174 // "finishAt"
	global LatestTimestamp
	byte 0x6475726174696f6e // "duration"
	app_global_get
	+
	app_global_put
	retsub

create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap()uint64"
	method "faucet(asset)void"
	method "getStakingToken()uint64"
	method "lastTimeRewardApplicable()uint64"
	method "rewardPerToken()uint64"
	method "earned(address)uint64"
	method "appOptedinAsset(asset)void"
	method "stake(axfer,address)void"
	method "withdraw(uint64)void"
	method "getReward()void"
	method "setRewardsDuration(uint64)void"
	method "notifyRewardAmount(uint64)void"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_faucet abi_route_getStakingToken abi_route_lastTimeRewardApplicable abi_route_rewardPerToken abi_route_earned abi_route_appOptedinAsset abi_route_stake abi_route_withdraw abi_route_getReward abi_route_setRewardsDuration abi_route_notifyRewardAmount
	err
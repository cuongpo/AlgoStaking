/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "faucet(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakingToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication(uint64)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "lastTimeRewardApplicable()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rewardPerToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "earned(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateReward(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "appOptedinAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stake(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getReward(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRewardsDuration(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addReward(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBalanceData(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getUserRewardPerTokenPaid(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTotalSupply()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakingToken": {
          "type": "uint64",
          "key": "stakingToken"
        },
        "duration": {
          "type": "uint64",
          "key": "duration"
        },
        "finishAt": {
          "type": "uint64",
          "key": "finishAt"
        },
        "updatedAt": {
          "type": "uint64",
          "key": "updatedAt"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rewardRate"
        },
        "lastTimeReward": {
          "type": "uint64",
          "key": "lastTimeReward"
        },
        "rewardPerTokenStored": {
          "type": "uint64",
          "key": "rewardPerTokenStored"
        },
        "totalSupply": {
          "type": "uint64",
          "key": "totalSupply"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Stake",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "faucet",
        "args": [
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getStakingToken",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "args": [
          {
            "name": "duration",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "address",
          "desc": ""
        }
      },
      {
        "name": "lastTimeRewardApplicable",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "rewardPerToken",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "earned",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "updateReward",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "appOptedinAsset",
        "args": [
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getReward",
        "args": [
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setRewardsDuration",
        "args": [
          {
            "name": "duration",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "addReward",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getBalanceData",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getUserRewardPerTokenPaid",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getTotalSupply",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Stake smart contract.
 */
export type Stake = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()uint64' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'faucet(asset)void' | 'faucet', {
      argsObj: {
        stakingToken: number | bigint
      }
      argsTuple: [stakingToken: number | bigint]
      returns: void
    }>
    & Record<'getStakingToken()uint64' | 'getStakingToken', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'createApplication(uint64)address' | 'createApplication', {
      argsObj: {
        duration: bigint | number
      }
      argsTuple: [duration: bigint | number]
      returns: string
    }>
    & Record<'lastTimeRewardApplicable()uint64' | 'lastTimeRewardApplicable', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'rewardPerToken()uint64' | 'rewardPerToken', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'earned(address)uint64' | 'earned', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'updateReward(address)uint64' | 'updateReward', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'appOptedinAsset(asset)void' | 'appOptedinAsset', {
      argsObj: {
        stakingToken: number | bigint
      }
      argsTuple: [stakingToken: number | bigint]
      returns: void
    }>
    & Record<'stake(axfer,asset)void' | 'stake', {
      argsObj: {
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        stakingToken: number | bigint
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, stakingToken: number | bigint]
      returns: void
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'getReward(asset)void' | 'getReward', {
      argsObj: {
        stakingToken: number | bigint
      }
      argsTuple: [stakingToken: number | bigint]
      returns: void
    }>
    & Record<'setRewardsDuration(uint64)void' | 'setRewardsDuration', {
      argsObj: {
        duration: bigint | number
      }
      argsTuple: [duration: bigint | number]
      returns: void
    }>
    & Record<'addReward(uint64)void' | 'addReward', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'getBalanceData(account)uint64' | 'getBalanceData', {
      argsObj: {
        account: number | bigint
      }
      argsTuple: [account: number | bigint]
      returns: bigint
    }>
    & Record<'getUserRewardPerTokenPaid(account)uint64' | 'getUserRewardPerTokenPaid', {
      argsObj: {
        account: number | bigint
      }
      argsTuple: [account: number | bigint]
      returns: bigint
    }>
    & Record<'getTotalSupply()uint64' | 'getTotalSupply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakingToken'?: IntegerState
      'duration'?: IntegerState
      'finishAt'?: IntegerState
      'updatedAt'?: IntegerState
      'rewardRate'?: IntegerState
      'lastTimeReward'?: IntegerState
      'rewardPerTokenStored'?: IntegerState
      'totalSupply'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type StakeSig = keyof Stake['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StakeSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Stake smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StakeSig> = Stake['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Stake smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StakeSig> = Stake['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type StakeCreateCalls = (typeof StakeCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type StakeCreateCallParams =
  | (TypedCallParams<'createApplication(uint64)address'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type StakeDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: StakeCreateCalls) => StakeCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StakeCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Stake smart contract using the createApplication(uint64)address ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64)address' as const,
          methodArgs: Array.isArray(args) ? args : [args.duration],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the faucet(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static faucet(args: MethodArgs<'faucet(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'faucet(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakingToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getStakingToken()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStakingToken(args: MethodArgs<'getStakingToken()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getStakingToken()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the lastTimeRewardApplicable()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lastTimeRewardApplicable(args: MethodArgs<'lastTimeRewardApplicable()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'lastTimeRewardApplicable()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rewardPerToken()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rewardPerToken(args: MethodArgs<'rewardPerToken()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rewardPerToken()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the earned(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static earned(args: MethodArgs<'earned(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'earned(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateReward(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateReward(args: MethodArgs<'updateReward(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateReward(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the appOptedinAsset(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static appOptedinAsset(args: MethodArgs<'appOptedinAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'appOptedinAsset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakingToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(axfer,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer, args.stakingToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getReward(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getReward(args: MethodArgs<'getReward(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getReward(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakingToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setRewardsDuration(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRewardsDuration(args: MethodArgs<'setRewardsDuration(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setRewardsDuration(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.duration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addReward(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addReward(args: MethodArgs<'addReward(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addReward(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getBalanceData(account)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBalanceData(args: MethodArgs<'getBalanceData(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getBalanceData(account)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getUserRewardPerTokenPaid(account)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getUserRewardPerTokenPaid(args: MethodArgs<'getUserRewardPerTokenPaid(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getUserRewardPerTokenPaid(account)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getTotalSupply()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTotalSupply(args: MethodArgs<'getTotalSupply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getTotalSupply()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Stake smart contract
 */
export class StakeClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `StakeClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Stake['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Stake smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: StakeDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StakeCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Stake smart contract using the createApplication(uint64)address ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64)address'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(uint64)address'>>> {
        return $this.mapReturnValue(await $this.appClient.create(StakeCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Stake smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the faucet(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public faucet(args: MethodArgs<'faucet(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.faucet(args, params))
  }

  /**
   * Calls the getStakingToken()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStakingToken(args: MethodArgs<'getStakingToken()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.getStakingToken(args, params))
  }

  /**
   * Calls the lastTimeRewardApplicable()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lastTimeRewardApplicable(args: MethodArgs<'lastTimeRewardApplicable()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.lastTimeRewardApplicable(args, params))
  }

  /**
   * Calls the rewardPerToken()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rewardPerToken(args: MethodArgs<'rewardPerToken()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.rewardPerToken(args, params))
  }

  /**
   * Calls the earned(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public earned(args: MethodArgs<'earned(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.earned(args, params))
  }

  /**
   * Calls the updateReward(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateReward(args: MethodArgs<'updateReward(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.updateReward(args, params))
  }

  /**
   * Calls the appOptedinAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public appOptedinAsset(args: MethodArgs<'appOptedinAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.appOptedinAsset(args, params))
  }

  /**
   * Calls the stake(axfer,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.stake(args, params))
  }

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.withdraw(args, params))
  }

  /**
   * Calls the getReward(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getReward(args: MethodArgs<'getReward(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.getReward(args, params))
  }

  /**
   * Calls the setRewardsDuration(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRewardsDuration(args: MethodArgs<'setRewardsDuration(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.setRewardsDuration(args, params))
  }

  /**
   * Calls the addReward(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addReward(args: MethodArgs<'addReward(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.addReward(args, params))
  }

  /**
   * Calls the getBalanceData(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBalanceData(args: MethodArgs<'getBalanceData(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.getBalanceData(args, params))
  }

  /**
   * Calls the getUserRewardPerTokenPaid(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getUserRewardPerTokenPaid(args: MethodArgs<'getUserRewardPerTokenPaid(account)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.getUserRewardPerTokenPaid(args, params))
  }

  /**
   * Calls the getTotalSupply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTotalSupply(args: MethodArgs<'getTotalSupply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StakeCallFactory.getTotalSupply(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Stake['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakingToken() {
        return StakeClient.getIntegerState(state, 'stakingToken')
      },
      get duration() {
        return StakeClient.getIntegerState(state, 'duration')
      },
      get finishAt() {
        return StakeClient.getIntegerState(state, 'finishAt')
      },
      get updatedAt() {
        return StakeClient.getIntegerState(state, 'updatedAt')
      },
      get rewardRate() {
        return StakeClient.getIntegerState(state, 'rewardRate')
      },
      get lastTimeReward() {
        return StakeClient.getIntegerState(state, 'lastTimeReward')
      },
      get rewardPerTokenStored() {
        return StakeClient.getIntegerState(state, 'rewardPerTokenStored')
      },
      get totalSupply() {
        return StakeClient.getIntegerState(state, 'totalSupply')
      },
    }
  }

  public compose(): StakeComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      faucet(args: MethodArgs<'faucet(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.faucet(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStakingToken(args: MethodArgs<'getStakingToken()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStakingToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      lastTimeRewardApplicable(args: MethodArgs<'lastTimeRewardApplicable()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.lastTimeRewardApplicable(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rewardPerToken(args: MethodArgs<'rewardPerToken()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rewardPerToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      earned(args: MethodArgs<'earned(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.earned(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateReward(args: MethodArgs<'updateReward(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      appOptedinAsset(args: MethodArgs<'appOptedinAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.appOptedinAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getReward(args: MethodArgs<'getReward(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRewardsDuration(args: MethodArgs<'setRewardsDuration(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRewardsDuration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addReward(args: MethodArgs<'addReward(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBalanceData(args: MethodArgs<'getBalanceData(account)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBalanceData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getUserRewardPerTokenPaid(args: MethodArgs<'getUserRewardPerTokenPaid(account)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getUserRewardPerTokenPaid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTotalSupply(args: MethodArgs<'getTotalSupply()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as StakeComposer
  }
}
export type StakeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'bootstrap()uint64'>]>

  /**
   * Calls the faucet(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  faucet(args: MethodArgs<'faucet(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'faucet(asset)void'>]>

  /**
   * Calls the getStakingToken()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakingToken(args: MethodArgs<'getStakingToken()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'getStakingToken()uint64'>]>

  /**
   * Calls the lastTimeRewardApplicable()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lastTimeRewardApplicable(args: MethodArgs<'lastTimeRewardApplicable()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'lastTimeRewardApplicable()uint64'>]>

  /**
   * Calls the rewardPerToken()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rewardPerToken(args: MethodArgs<'rewardPerToken()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'rewardPerToken()uint64'>]>

  /**
   * Calls the earned(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  earned(args: MethodArgs<'earned(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'earned(address)uint64'>]>

  /**
   * Calls the updateReward(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateReward(args: MethodArgs<'updateReward(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'updateReward(address)uint64'>]>

  /**
   * Calls the appOptedinAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  appOptedinAsset(args: MethodArgs<'appOptedinAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'appOptedinAsset(asset)void'>]>

  /**
   * Calls the stake(axfer,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'stake(axfer,asset)void'>]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'withdraw(uint64)void'>]>

  /**
   * Calls the getReward(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getReward(args: MethodArgs<'getReward(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'getReward(asset)void'>]>

  /**
   * Calls the setRewardsDuration(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRewardsDuration(args: MethodArgs<'setRewardsDuration(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'setRewardsDuration(uint64)void'>]>

  /**
   * Calls the addReward(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addReward(args: MethodArgs<'addReward(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'addReward(uint64)void'>]>

  /**
   * Calls the getBalanceData(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalanceData(args: MethodArgs<'getBalanceData(account)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'getBalanceData(account)uint64'>]>

  /**
   * Calls the getUserRewardPerTokenPaid(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserRewardPerTokenPaid(args: MethodArgs<'getUserRewardPerTokenPaid(account)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'getUserRewardPerTokenPaid(account)uint64'>]>

  /**
   * Calls the getTotalSupply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalSupply(args: MethodArgs<'getTotalSupply()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, MethodReturn<'getTotalSupply()uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the Stake smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): StakeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): StakeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<StakeComposerResults<TReturns>>
}
export type StakeComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}

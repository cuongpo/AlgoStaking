#pragma version 9

// This TEAL was generated by TEALScript v0.59.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// bootstrap()uint64
//
// // mint Token
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bootstrap()uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 1 0

	// contracts/stake.algo.ts:32
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/stake.algo.ts:33
	// stakingToken = sendAssetCreation({
	//       configAssetTotal: 10000,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/stake.algo.ts:34
	// configAssetTotal: 10000
	int 10000
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -1 // stakingToken: asset

	// contracts/stake.algo.ts:37
	// this.stakingToken.value = stakingToken
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	frame_dig -1 // stakingToken: asset
	app_global_put

	// contracts/stake.algo.ts:38
	// this.totalSupply.value = 1
	byte 0x746f74616c537570706c79 // "totalSupply"
	int 1
	app_global_put

	// contracts/stake.algo.ts:39
	// this.rewardRate.value = 1
	byte 0x72657761726452617465 // "rewardRate"
	int 1
	app_global_put

	// contracts/stake.algo.ts:40
	// this.finishAt.value= 0
	byte 0x66696e6973684174 // "finishAt"
	int 0
	app_global_put

	// contracts/stake.algo.ts:41
	// return stakingToken;
	frame_dig -1 // stakingToken: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// faucet(asset)void
abi_route_faucet:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// stakingToken: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute faucet(asset)void
	callsub faucet
	int 1
	return

faucet:
	proto 2 0

	// contracts/stake.algo.ts:45
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:46
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:47
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:48
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stake.algo.ts:50
	// acc: accData = {
	//       balance: 0,
	//       rewards: 0,
	//       userRewardPerTokenPaid: 0,
	//       earned: 0,
	//     }
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_bury -2 // acc: accData

	// contracts/stake.algo.ts:56
	// this.accData(this.txn.sender).value = acc
	txn Sender
	byte 0x0000000000000000000000000000000000000000000000000000000000000000 // acc: accData
	box_put
	retsub

// getStakingToken()uint64
abi_route_getStakingToken:
	// execute getStakingToken()uint64
	callsub getStakingToken
	int 1
	return

getStakingToken:
	proto 0 0

	// contracts/stake.algo.ts:61
	// return this.stakingToken.value;
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// createApplication(uint64)void
abi_route_createApplication:
	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/stake.algo.ts:65
	// this.duration.value = duration
	byte 0x6475726174696f6e // "duration"
	frame_dig -1 // duration: uint64
	app_global_put
	retsub

// lastTimeRewardApplicable()uint64
abi_route_lastTimeRewardApplicable:
	// execute lastTimeRewardApplicable()uint64
	callsub lastTimeRewardApplicable
	int 1
	return

lastTimeRewardApplicable:
	proto 0 0

	// if0_condition
	// contracts/stake.algo.ts:69
	// globals.latestTimestamp <= this.finishAt.value
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	<=
	bz if0_end

	// if0_consequent
	// contracts/stake.algo.ts:70
	// this.lastTimeReward.value = globals.latestTimestamp
	byte 0x6c61737454696d65526577617264 // "lastTimeReward"
	global LatestTimestamp
	app_global_put

if0_end:
	// contracts/stake.algo.ts:72
	// this.lastTimeReward.value = this.finishAt.value
	byte 0x6c61737454696d65526577617264 // "lastTimeReward"
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	app_global_put

	// contracts/stake.algo.ts:74
	// return this.lastTimeReward.value
	byte 0x6c61737454696d65526577617264 // "lastTimeReward"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// rewardPerToken()uint64
abi_route_rewardPerToken:
	// execute rewardPerToken()uint64
	callsub rewardPerToken
	int 1
	return

rewardPerToken:
	proto 0 0

	// contracts/stake.algo.ts:78
	// this.lastTimeRewardApplicable()
	callsub lastTimeRewardApplicable

	// if1_condition
	// contracts/stake.algo.ts:79
	// this.totalSupply.value === 0
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	int 0
	==
	bz if1_end

	// if1_consequent
	// contracts/stake.algo.ts:80
	// return this.rewardPerTokenStored.value;
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

if1_end:
	// contracts/stake.algo.ts:82
	// this.rewardPerTokenStored.value = (this.rewardPerTokenStored.value + (this.rewardRate.value * (this.lastTimeReward.value - this.updatedAt.value))/this.totalSupply.value)
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	byte 0x72657761726452617465 // "rewardRate"
	app_global_get
	byte 0x6c61737454696d65526577617264 // "lastTimeReward"
	app_global_get
	byte 0x757064617465644174 // "updatedAt"
	app_global_get
	-
	*
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	/
	+
	app_global_put

	// contracts/stake.algo.ts:83
	// return  this.rewardPerTokenStored.value;
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// earned(address)uint64
abi_route_earned:
	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute earned(address)uint64
	callsub earned
	int 1
	return

earned:
	proto 1 0

	// contracts/stake.algo.ts:87
	// this.accData(account).value.earned = (
	//       (this.accData(account).value.balance * (this.rewardPerTokenStored.value - this.accData(account).value.userRewardPerTokenPaid))
	//       +
	//       this.accData(account).value.rewards
	//     )
	int 24
	frame_dig -1 // account: address
	box_get
	assert
	extract 0 8
	btoi
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	frame_dig -1 // account: address
	box_get
	assert
	extract 8 8
	btoi
	-
	*
	frame_dig -1 // account: address
	box_get
	assert
	extract 16 8
	btoi
	+
	itob
	frame_dig -1 // account: address
	cover 2
	box_replace

	// contracts/stake.algo.ts:92
	// return this.accData(account).value.earned;
	frame_dig -1 // account: address
	box_get
	assert
	extract 24 8
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

updateReward:
	proto 1 0

	// contracts/stake.algo.ts:96
	// this.rewardPerToken()
	callsub rewardPerToken

	// contracts/stake.algo.ts:97
	// this.updatedAt.value = this.lastTimeReward.value
	byte 0x757064617465644174 // "updatedAt"
	byte 0x6c61737454696d65526577617264 // "lastTimeReward"
	app_global_get
	app_global_put

	// contracts/stake.algo.ts:98
	// this.earned(account)
	frame_dig -1 // account: address
	callsub earned

	// contracts/stake.algo.ts:99
	// this.accData(account).value.rewards = this.accData(account).value.earned
	int 16
	frame_dig -1 // account: address
	box_get
	assert
	extract 24 8
	btoi
	itob
	frame_dig -1 // account: address
	cover 2
	box_replace

	// contracts/stake.algo.ts:100
	// this.accData(account).value.userRewardPerTokenPaid = this.rewardPerTokenStored.value
	int 8
	byte 0x726577617264506572546f6b656e53746f726564 // "rewardPerTokenStored"
	app_global_get
	itob
	frame_dig -1 // account: address
	cover 2
	box_replace
	retsub

// appOptedinAsset(asset)void
abi_route_appOptedinAsset:
	// stakingToken: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute appOptedinAsset(asset)void
	callsub appOptedinAsset
	int 1
	return

appOptedinAsset:
	proto 1 0

	// contracts/stake.algo.ts:104
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:105
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:106
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:107
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// stake(asset,axfer)void
abi_route_stake:
	// stakingToken: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute stake(asset,axfer)void
	callsub stake
	int 1
	return

stake:
	proto 2 0

	// Verify axfer
	// contracts/stake.algo.ts:113
	// verifyTxn(axfer, { assetReceiver: this.app.address })
	// verify assetReceiver
	frame_dig -1 // axfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/stake.algo.ts:114
	// this.accData(this.txn.sender).value.balance = this.accData(this.txn.sender).value.balance + axfer.assetAmount
	int 0
	txn Sender
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -1 // axfer: axfer
	gtxns AssetAmount
	+
	itob
	txn Sender
	cover 2
	box_replace

	// contracts/stake.algo.ts:116
	// this.totalSupply.value = this.totalSupply.value + axfer.assetAmount
	byte 0x746f74616c537570706c79 // "totalSupply"
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	frame_dig -1 // axfer: axfer
	gtxns AssetAmount
	+
	app_global_put

	// contracts/stake.algo.ts:118
	// this.updateReward(this.txn.sender)
	txn Sender
	callsub updateReward
	retsub

// withdraw(uint64)void
abi_route_withdraw:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64)void
	callsub withdraw
	int 1
	return

withdraw:
	proto 1 0

	// contracts/stake.algo.ts:122
	// assert(amount > 0)
	frame_dig -1 // amount: uint64
	int 0
	>
	assert

	// contracts/stake.algo.ts:123
	// assert(this.accData(this.txn.sender).value.balance > amount)
	txn Sender
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -1 // amount: uint64
	>
	assert

	// contracts/stake.algo.ts:124
	// this.accData(this.txn.sender).value.balance = this.accData(this.txn.sender).value.balance - amount
	int 0
	txn Sender
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -1 // amount: uint64
	-
	itob
	txn Sender
	cover 2
	box_replace

	// contracts/stake.algo.ts:125
	// this.totalSupply.value = this.totalSupply.value - amount
	byte 0x746f74616c537570706c79 // "totalSupply"
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	app_global_put

	// contracts/stake.algo.ts:126
	// sendAssetTransfer({
	//       xferAsset: this.stakingToken.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:127
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:128
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:129
	// assetAmount: amount
	frame_dig -1 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/stake.algo.ts:131
	// this.updateReward(this.txn.sender)
	txn Sender
	callsub updateReward
	retsub

// getReward()void
abi_route_getReward:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute getReward()void
	callsub getReward
	int 1
	return

getReward:
	proto 1 0

	// contracts/stake.algo.ts:135
	// reward = this.accData(this.txn.sender).value.rewards
	txn Sender
	box_get
	assert
	extract 16 8
	btoi
	frame_bury -1 // reward: uint64

	// if2_condition
	// contracts/stake.algo.ts:136
	// reward > 0
	frame_dig -1 // reward: uint64
	int 0
	>
	bz if2_end

	// if2_consequent
	// contracts/stake.algo.ts:137
	// this.accData(this.txn.sender).value.rewards = 0
	txn Sender
	int 16
	byte 0x0000000000000000
	box_replace

	// contracts/stake.algo.ts:138
	// sendAssetTransfer({
	//         xferAsset: this.stakingToken.value,
	//         assetReceiver: this.txn.sender,
	//         assetAmount: reward,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/stake.algo.ts:139
	// xferAsset: this.stakingToken.value
	byte 0x7374616b696e67546f6b656e // "stakingToken"
	app_global_get
	itxn_field XferAsset

	// contracts/stake.algo.ts:140
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/stake.algo.ts:141
	// assetAmount: reward
	frame_dig -1 // reward: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if2_end:
	retsub

// setRewardsDuration(uint64)void
abi_route_setRewardsDuration:
	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute setRewardsDuration(uint64)void
	callsub setRewardsDuration
	int 1
	return

setRewardsDuration:
	proto 1 0

	// contracts/stake.algo.ts:147
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/stake.algo.ts:148
	// assert(globals.latestTimestamp > this.finishAt.value)
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	>
	assert

	// contracts/stake.algo.ts:149
	// this.duration.value = duration
	byte 0x6475726174696f6e // "duration"
	frame_dig -1 // duration: uint64
	app_global_put
	retsub

// notifyRewardAmount(uint64)void
abi_route_notifyRewardAmount:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute notifyRewardAmount(uint64)void
	callsub notifyRewardAmount
	int 1
	return

notifyRewardAmount:
	proto 1 0

	// if3_condition
	// contracts/stake.algo.ts:154
	// globals.latestTimestamp >= this.finishAt.value
	global LatestTimestamp
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	>=
	bz if3_else

	// if3_consequent
	// contracts/stake.algo.ts:155
	// this.rewardRate.value = amount / this.duration.value
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -1 // amount: uint64
	byte 0x6475726174696f6e // "duration"
	app_global_get
	/
	app_global_put
	b if3_end

if3_else:
	// contracts/stake.algo.ts:157
	// this.rewardRate.value =
	//         (amount + this.rewardRate.value * (this.finishAt.value - globals.latestTimestamp)) / this.duration.value
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -1 // amount: uint64
	byte 0x72657761726452617465 // "rewardRate"
	app_global_get
	byte 0x66696e6973684174 // "finishAt"
	app_global_get
	global LatestTimestamp
	-
	*
	+
	byte 0x6475726174696f6e // "duration"
	app_global_get
	/
	app_global_put

if3_end:
	// contracts/stake.algo.ts:162
	// this.updatedAt.value = globals.latestTimestamp
	byte 0x757064617465644174 // "updatedAt"
	global LatestTimestamp
	app_global_put

	// contracts/stake.algo.ts:163
	// this.finishAt.value = globals.latestTimestamp + this.duration.value
	byte 0x66696e6973684174 // "finishAt"
	global LatestTimestamp
	byte 0x6475726174696f6e // "duration"
	app_global_get
	+
	app_global_put
	retsub

// getRewardData(account)uint64
abi_route_getRewardData:
	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getRewardData(account)uint64
	callsub getRewardData
	int 1
	return

getRewardData:
	proto 1 0

	// contracts/stake.algo.ts:168
	// return this.accData(account).value.rewards;
	frame_dig -1 // account: account
	box_get
	assert
	extract 16 8
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getBalanceData(account)uint64
abi_route_getBalanceData:
	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getBalanceData(account)uint64
	callsub getBalanceData
	int 1
	return

getBalanceData:
	proto 1 0

	// contracts/stake.algo.ts:172
	// return this.accData(account).value.balance;
	frame_dig -1 // account: account
	box_get
	assert
	extract 0 8
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getUserRewardPerTokenPaid(account)uint64
abi_route_getUserRewardPerTokenPaid:
	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getUserRewardPerTokenPaid(account)uint64
	callsub getUserRewardPerTokenPaid
	int 1
	return

getUserRewardPerTokenPaid:
	proto 1 0

	// contracts/stake.algo.ts:176
	// return this.accData(account).value.userRewardPerTokenPaid;
	frame_dig -1 // account: account
	box_get
	assert
	extract 8 8
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getTotalSupply()uint64
abi_route_getTotalSupply:
	// execute getTotalSupply()uint64
	callsub getTotalSupply
	int 1
	return

getTotalSupply:
	proto 0 0

	// contracts/stake.algo.ts:180
	// return this.totalSupply.value;
	byte 0x746f74616c537570706c79 // "totalSupply"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap()uint64"
	method "faucet(asset)void"
	method "getStakingToken()uint64"
	method "lastTimeRewardApplicable()uint64"
	method "rewardPerToken()uint64"
	method "earned(address)uint64"
	method "appOptedinAsset(asset)void"
	method "stake(axfer,asset)void"
	method "withdraw(uint64)void"
	method "getReward()void"
	method "setRewardsDuration(uint64)void"
	method "notifyRewardAmount(uint64)void"
	method "getRewardData(account)uint64"
	method "getBalanceData(account)uint64"
	method "getUserRewardPerTokenPaid(account)uint64"
	method "getTotalSupply()uint64"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_faucet abi_route_getStakingToken abi_route_lastTimeRewardApplicable abi_route_rewardPerToken abi_route_earned abi_route_appOptedinAsset abi_route_stake abi_route_withdraw abi_route_getReward abi_route_setRewardsDuration abi_route_notifyRewardAmount abi_route_getRewardData abi_route_getBalanceData abi_route_getUserRewardPerTokenPaid abi_route_getTotalSupply
	err
{
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "faucet(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakingToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "lastTimeRewardApplicable()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rewardPerToken()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "earned(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "appOptedinAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stake(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getReward()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRewardsDuration(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "notifyRewardAmount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRewardData(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBalanceData(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getUserRewardPerTokenPaid(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTotalSupply()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakingToken": {
          "type": "uint64",
          "key": "stakingToken"
        },
        "duration": {
          "type": "uint64",
          "key": "duration"
        },
        "finishAt": {
          "type": "uint64",
          "key": "finishAt"
        },
        "updatedAt": {
          "type": "uint64",
          "key": "updatedAt"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rewardRate"
        },
        "rewardPerTokenStored": {
          "type": "uint64",
          "key": "rewardPerTokenStored"
        },
        "totalSupply": {
          "type": "uint64",
          "key": "totalSupply"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 7
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Stake",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "faucet",
        "args": [
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getStakingToken",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "args": [
          {
            "name": "duration",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "lastTimeRewardApplicable",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "rewardPerToken",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "earned",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "appOptedinAsset",
        "args": [
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "stakingToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getReward",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setRewardsDuration",
        "args": [
          {
            "name": "duration",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "notifyRewardAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getRewardData",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getBalanceData",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getUserRewardPerTokenPaid",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getTotalSupply",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}